import groovy.sql.Sql

plugins {
	id 'org.springframework.boot' version '2.4.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'ru.victormalkov'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '15'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	mybuild
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.4.3'
	mybuild 'org.postgresql:postgresql'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'
}

bootRun {
	environment 'spring.output.ansi.console-available', true
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}

task resetdb {
	doLast {
		def sqlClassLoader = Sql.classLoader
		configurations.mybuild.each { sqlClassLoader.addURL it.toURI().toURL() }
		def props = [user: 'mytest', password: 'mypass', allowMultiQueries: 'true'] as Properties
		def url = 'jdbc:postgresql://localhost:5432/testdb'
		def driver = 'org.postgresql.Driver'
		def sql = Sql.newInstance(url, props, driver)
		sql.execute("drop table if exists posts cascade")
		sql.execute("drop table if exists users cascade")
		sql.execute("drop sequence if exists hibernate_sequence")
		sql.close()
	}
}

task insertdb {
	doLast {
		def sqlClassLoader = Sql.classLoader
		configurations.mybuild.each { sqlClassLoader.addURL it.toURI().toURL() }
		def props = [user: 'mytest', password: 'mypass', allowMultiQueries: 'true'] as Properties
		def url = 'jdbc:postgresql://localhost:5432/testdb'
		def driver = 'org.postgresql.Driver'
		def sql = Sql.newInstance(url, props, driver)
		sql.execute("insert into users(name, password, role) values ('qqq www', '\$2y\$12\$6gPmg/G1ye5zfbpGVy1Kku1hqW81B2Gl5puQTeglT5b7qLoAMZUd6', 'default')")
		sql.execute("insert into users(name) values ('Rr Tt')")

		sql.execute("insert into posts(author_id, text) values (1, 'utochka')")
		sql.execute("insert into posts(author_id, text) values (1, 'kurochka')")
		sql.execute("insert into posts(author_id, text) values (1, 'ejoeggjeojojwroe')")
		sql.execute("insert into posts(author_id, text) values (2, 'qrfefefe')")
		sql.execute("insert into posts(author_id, text) values (2, 'utochka')")

		sql.close()
	}
}

